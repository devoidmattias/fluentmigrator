using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using FluentMigrator.Model;
using FluentMigrator.SchemaGen.Extensions;
using FluentMigrator.SchemaGen.SchemaReaders;

namespace FluentMigrator.SchemaGen.SchemaWriters
{
    public abstract class FmSchemaWriterBase
    {
        protected const string Indent0 = "\n\t\t\t";
        private const string Indent1 = "\n\t\t\t\t";
        private const string Indent2 = "\n\t\t\t\t\t";
        protected IOptions options;
        protected StreamWriter output;

        protected FmSchemaWriterBase(IOptions options)
        {
            this.options = options;
        }

        private Regex MapFilter(string filter)
        {
            string[] patterns = (from pat in filter.Split(',') select "^" + pat.Replace(".", "\\.").Replace("*", ".*") + "$").ToArray();
            return new Regex(String.Join("|", patterns));
        }

        public IEnumerable<TableDefinition> ApplyTableFilter(IEnumerable<TableDefinition> tables)
        {
            if (options.IncludeTables != null)
            {
                var pattern = MapFilter(options.IncludeTables);
                tables = tables.Where(table => pattern.IsMatch(table.Name));
            }

            if (options.ExcludeTables != null)
            {
                var pattern = MapFilter(options.ExcludeTables);
                tables = tables.Where(table => !pattern.IsMatch(table.Name));
            }

            return tables;
        }

        protected abstract void WriteUpMethod();

        protected abstract void WriteDownMethod();

        protected void WriteClass()
        {
            // Wrapper Up()/Down() methods within C# class 
            WriteClass(() =>
            {
                WriteUpMethod();

                if (!options.AutoReversingMigration)
                {
                    WriteDownMethod();
                }
            });
        }

        protected void WriteClass(Action writeClassBody)
        {
            output.WriteLine("using System;");
            output.WriteLine("using System.Collections.Generic;");
            output.WriteLine("using System.Linq;");
            output.WriteLine("using System.Web;");
            output.WriteLine("using FluentMigrator;");
            output.WriteLine("using AMPRO.Migrations.FM_Extensions;");

            output.WriteLine(String.Empty);
            output.WriteLine("namespace {0}", options.NameSpace);
            output.WriteLine("{");

            output.WriteLine("\n\t/*");
            output.WriteLine("\t * WARNING: This class was generated by FluentMigrator.SchemaGen at {0}.", DateTime.Now);
            output.WriteLine("\t * DO NOT EDIT - Your changes may be overwritten!");
            output.WriteLine("\t */\n");

            output.WriteLine("\t[MigrationVersion({0})]", options.MigrationVersion.Replace(".", ", "));
            output.WriteLine("\tpublic class {0} : {1}", options.ClassName, options.AutoReversingMigration ? "AutoReversingMigration" : "Migration");
            output.WriteLine("\t{");

            // ** Write main body of class
            writeClassBody();

            output.WriteLine("\t}"); //end class
            output.WriteLine(String.Empty);
            output.WriteLine("}"); //end namespace
        }

        protected void CreateTable(TableDefinition table)
        {
            var columnIndexes = new Dictionary<string, short>();
            output.Write("{0}#region UP Table {1}.{2}", Indent0, table.SchemaName, table.Name); //end method

            //ColumnDefinition pkCol = table.Columns.FirstOrDefault(col => col.IsPrimaryKey);
            //bool hasClusteredPkIndex = table.Indexes.Any(index => index.IsClustered && index.IsUnique && index.Columns.All(col => col.Name == pkCol.Name));

            output.WriteLine("{0}Create.Table(\"{2}\").InSchema(\"{1}\")", Indent0, table.SchemaName, table.Name);
            foreach (ColumnDefinition column in table.Columns)
            {
                WriteColumn(column, column == table.Columns.Last(), columnIndexes);
            }

            foreach (IndexDefinition index in table.Indexes)
            {
                // Output indexes not included with columns
                if (!columnIndexes.ContainsKey(index.Name))
                {
                    WriteIndex(index);
                }
            }

            output.WriteLine("{0}#endregion", Indent0);
        }

        protected void WriteIndex(IndexDefinition index)
        {
            var sb = new StringBuilder();

            //Create.Index("ix_Name").OnTable("TestTable2").OnColumn("Name").Ascending().WithOptions().NonClustered();
            sb.AppendFormat("{0}Create.Index(\"{1}\").OnTable(\"{2}\")", Indent0, index.Name, index.TableName);

            if (index.IsUnique)
            {
                sb.AppendFormat("{0}.WithOptions().Unique()", Indent1);
            }

            if (index.IsClustered)
            {
                sb.AppendFormat("{0}.WithOptions().Clustered()", Indent1);
            }

            foreach (var col in index.Columns)
            {
                sb.AppendFormat("{0}.OnColumn(\"{1}\")", Indent1, col.Name);
                sb.AppendFormat(".{0}()", col.Direction.ToString());
            }

            sb.Append(";");

            output.WriteLine(sb.ToString());
        }

        private string ToStringArray(IEnumerable<string> cols)
        {
            string strCols = String.Join(", ", cols.Select(col => '"' + col + '"').ToArray());
            return '{' + strCols + '}';
        }

        protected void CreateForeignKey(ForeignKeyDefinition fk)
        {
            var sb = new StringBuilder();

            //Create.ForeignKey("fk_TestTable2_TestTableId_TestTable_Id")
            //    .FromTable("TestTable2").ForeignColumn("TestTableId")
            //    .ToTable("TestTable").PrimaryColumn("Id");

            sb.AppendFormat("{0}Create.ForeignKey(\"{1}\")", Indent0, fk.Name);
            
            // From Table
            sb.AppendFormat("{0}.FromTable(\"{1}\")", Indent1, fk.ForeignTable);
            if (fk.ForeignColumns.Count == 1)
            {
                sb.AppendFormat("{0}.ForeignColumn(\"{1}\")", Indent2, fk.ForeignColumns.First());
            }
            else
            {
                sb.AppendFormat("{0}.ForeignColumns({1})", Indent2, ToStringArray(fk.ForeignColumns));
            }

            // To Table
            sb.AppendFormat("{0}.ToTable(\"{1}\")", Indent1, fk.PrimaryTable);
            if (fk.PrimaryColumns.Count == 1)
            {
                sb.AppendFormat("{0}.PrimaryColumn(\"{1}\")", Indent2, fk.PrimaryColumns.First());
            }
            else
            {
                sb.AppendFormat("{0}.PrimaryColumns({1})", Indent2, ToStringArray(fk.PrimaryColumns));
            }

            if (fk.OnDelete != Rule.None && fk.OnDelete == fk.OnUpdate)
            {
                sb.AppendFormat("{0}.OnDeleteOrUpdate(System.Data.Rule.{1})", Indent1, fk.OnDelete);
            }
            else
            {
                if (fk.OnDelete != Rule.None)
                {
                    sb.AppendFormat("{0}.OnDelete(System.Data.Rule.{1})", Indent1, fk.OnDelete);
                }

                if (fk.OnUpdate != Rule.None)
                {
                    sb.AppendFormat("{0}.OnUpdate(System.Data.Rule.{1})", Indent1, fk.OnUpdate);
                }                
            }

            output.WriteLine(sb + ";");
        }

        protected void DeleteTableForeignKeys(TableDefinition table)
        {
            if (table.ForeignKeys.Any())
            {
                output.Write("{0}#region DOWN Table Foreign Keys {1}.{2}", Indent0, table.SchemaName, table.Name);
                foreach (var fk in table.ForeignKeys)
                {
                    output.Write("{0}Delete.ForeignKey(\"{1}\").OnTable(\"{2}\");", Indent0, fk.Name, table.Name);
                }
                output.WriteLine("{0}#endregion", Indent0);
            }
        }

        protected void DeleteTable(TableDefinition table)
        {
            output.Write("{0}#region DOWN Table {1}.{2}", Indent0, table.SchemaName, table.Name);

            foreach (var index in table.Indexes)
            {
                output.Write("{0}Delete.Index(\"{1}\");", Indent0, index.Name);
            }

            //Delete.Table("Bar");
            output.Write("{0}Delete.Table(\"{1}\");", Indent0, table.Name);
            output.WriteLine("{0}#endregion", Indent0);
        }

        protected void WriteColumn(ColumnDefinition column, bool lastColumn, Dictionary<string, short> columnIndexes)
        {
            var sb = new StringBuilder();

            sb.AppendFormat(".WithColumn(\"{0}\").{1}", column.Name, GetMigrationTypeFunctionForType(column));

            if (column.IsIdentity)
            {
                sb.Append(".Identity()");
            }

            if (column.IsPrimaryKey)
            {
                columnIndexes[column.PrimaryKeyName] = 1;
                sb.AppendFormat(".PrimaryKey(\"{0}\")", column.PrimaryKeyName);
            }
            else if (column.IsUnique)
            {
                columnIndexes[column.IndexName] = 1;
                sb.AppendFormat(".Unique(\"{0}\")", column.IndexName);
            }
            else if (column.IsIndexed)
            {
                columnIndexes[column.IndexName] = 1;
                sb.AppendFormat(".Indexed(\"{0}\")", column.IndexName);
            }

            if (column.IsNullable.HasValue)
            {
                sb.Append(column.IsNullable.Value ? ".Nullable()" : ".NotNullable()");
            }

            if (column.DefaultValue != null && !column.IsIdentity)
            {
                sb.AppendFormat((string) ".WithDefaultValue({0})", (object) GetColumnDefaultValue(column));
            }

            if (lastColumn) sb.Append(";");

            output.WriteLine("\t\t\t\t" + sb);
        }

        private string GetMigrationTypeSize(DbType? type, int size)
        {
            if (size == -1) return "int.MaxValue";

            if (type == DbType.Binary && size == DbTypeSizes.ImageCapacity) return "DbTypeSizes.ImageCapacity";              // IMAGE fields
            if (type == DbType.AnsiString && size == DbTypeSizes.AnsiTextCapacity) return "DbTypeSizes.AnsiTextCapacity";    // TEXT fields
            if (type == DbType.String && size == DbTypeSizes.UnicodeTextCapacity) return "DbTypeSizes.UnicodeTextCapacity";  // NTEXT fields

            return size.ToString();
        }

        public string GetMigrationTypeFunctionForType(ColumnDefinition col)
        {
            var precision = col.Precision;
            string sizeStr = GetMigrationTypeSize(col.Type, col.Size);
            string precisionStr = (precision == -1) ? "" : "," + precision.ToString();
            string sysType = "AsString(" + sizeStr + ")";

            switch (col.Type)
            {
                case DbType.AnsiString:
                    if (options.UseDeprecatedTypes && col.Size == DbTypeSizes.AnsiTextCapacity)
                    {
                        sysType = "AsCustom(\"TEXT\")";
                    }
                    else
                    {
                        sysType = string.Format("AsAnsiString({0})", sizeStr);
                    }
                    break;
                case DbType.AnsiStringFixedLength:
                    sysType = string.Format("AsFixedLengthAnsiString({0})", sizeStr);
                    break;
                case DbType.String:
                    if (options.UseDeprecatedTypes && col.Size == DbTypeSizes.UnicodeTextCapacity)
                    {
                        sysType = "AsCustom(\"NTEXT\")";
                    }
                    else
                    {
                        sysType = string.Format("AsString({0})", sizeStr);
                    }
                    break;
                case DbType.StringFixedLength:
                    sysType = string.Format("AsFixedLengthString({0})", sizeStr);
                    break;
                case DbType.Binary:
                    if (options.UseDeprecatedTypes && col.Size == DbTypeSizes.ImageCapacity)
                    {
                        sysType = "AsCustom(\"IMAGE\")";                        
                    }
                    else
                    {
                        sysType = string.Format("AsBinary({0})", sizeStr);
                    }
                    break;
                case DbType.Boolean:
                    sysType = "AsBoolean()";
                    break;
                case DbType.Byte:
                    sysType = "AsByte()";
                    break;
                case DbType.Currency:
                    sysType = "AsCurrency()";
                    break;
                case DbType.Date:
                    sysType = "AsDate()";
                    break;
                case DbType.DateTime:
                    sysType = "AsDateTime()";
                    break;
                case DbType.Decimal:
                    sysType = string.Format("AsDecimal({0})", sizeStr + precisionStr);
                    break;
                case DbType.Double:
                    sysType = "AsDouble()";
                    break;
                case DbType.Guid:
                    sysType = "AsGuid()";
                    break;
                case DbType.Int16:
                case DbType.UInt16:
                    sysType = "AsInt16()";
                    break;
                case DbType.Int32:
                case DbType.UInt32:
                    sysType = "AsInt32()";
                    break;
                case DbType.Int64:
                case DbType.UInt64:
                    sysType = "AsInt64()";
                    break;
                case DbType.Single:
                    sysType = "AsFloat()";
                    break;
                case null:
                    sysType = string.Format("AsCustom({0})", col.CustomType);
                    break;
                default:
                    break;
            }

            return sysType;
        }

        public string GetColumnDefaultValue(ColumnDefinition col)
        {
            string sysType = null;
            string defValue = col.DefaultValue.ToString();

            var guid = Guid.Empty;
            switch (col.Type)
            {
                case DbType.Boolean:
                case DbType.Byte:
                case DbType.Currency:
                case DbType.Decimal:
                case DbType.Double:
                case DbType.Int16:
                case DbType.Int32:
                case DbType.Int64:
                case DbType.Single:
                case DbType.UInt16:
                case DbType.UInt32:
                case DbType.UInt64:
                    sysType = defValue.Replace("'", "").Replace("\"", "").CleanBracket();
                    break;
                
                case DbType.Guid:
                    if (defValue.IsGuid(out guid))
                    {
                        if (guid == Guid.Empty)
                            sysType = "Guid.Empty";
                        else
                            sysType = string.Format("new System.Guid(\"{0}\")", guid);
                    }
                    break;

                case DbType.DateTime:
                case DbType.DateTime2:
                case DbType.Date:
                    if (defValue.ToLower() == "current_time"
                        || defValue.ToLower() == "current_date"
                        || defValue.ToLower() == "current_timestamp")
                    {
                        sysType = "SystemMethods.CurrentDateTime";
                    }
                    else
                    {
                        sysType = "\"" + defValue.CleanBracket() + "\"";
                    }
                    break;
                
                default:
                    sysType = string.Format("\"{0}\"", col.DefaultValue);
                    break;
            }

            return sysType;
        }
    }
}